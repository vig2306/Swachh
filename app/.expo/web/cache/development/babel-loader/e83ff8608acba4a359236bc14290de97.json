{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _components = require(\"./components/\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _jsxFileName = \"/Users/abar/dev/personal/react-native-user-avatar/src/index.js\";\n;\n\nvar UserAvatar = function UserAvatar(props) {\n  var name = props.name,\n      src = props.src,\n      bgColor = props.bgColor,\n      bgColors = props.bgColors,\n      textColor = props.textColor,\n      size = props.size,\n      imageStyle = props.imageStyle,\n      style = props.style,\n      borderRadius = props.borderRadius,\n      component = props.component;\n\n  if (typeof size === 'string') {\n    console.warn('size prop should be a number');\n    size = parseInt(size);\n  }\n\n  var _useState = (0, _react.useState)(_react.default.createElement(_components.TextAvatar, {\n    textColor: textColor,\n    size: size,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  })),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      inner = _useState2[0],\n      setInner = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    if (component) setInner(_react.default.createElement(_components.CustomAvatar, {\n      size: size,\n      component: component,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 29\n      }\n    }));\n\n    if (src) {\n      (0, _helpers.fetchImage)(src).then(function (isImage) {\n        if (isImage) {\n          setInner(_react.default.createElement(_components.ImageAvatar, {\n            src: src,\n            size: size,\n            imageStyle: imageStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }\n          }));\n        }\n      });\n    }\n  }, []);\n  return _react.default.createElement(_reactNative.View, {\n    style: [(0, _helpers.generateBackgroundStyle)(name, bgColor, bgColors), (0, _helpers.getContainerStyle)(size, src, borderRadius), style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, inner);\n};\n\nUserAvatar.propTypes = {\n  name: _propTypes.default.string,\n  src: _propTypes.default.string,\n  bgColor: _propTypes.default.string,\n  bgColors: _propTypes.default.array,\n  textColor: _propTypes.default.string,\n  size: _propTypes.default.number,\n  imageStyle: _propTypes.default.object,\n  style: _propTypes.default.object,\n  borderRadius: _propTypes.default.number,\n  component: _propTypes.default.any\n};\nUserAvatar.defaultProps = {\n  size: 32,\n  textColor: '#fff',\n  name: 'John Doe',\n  bgColors: ['#2ecc71', '#3498db', '#8e44ad', '#e67e22', '#e74c3c', '#1abc9c', '#2c3e50']\n};\nvar _default = UserAvatar;\nexports.default = _default;","map":{"version":3,"sources":["index.js"],"names":["UserAvatar","name","src","bgColor","bgColors","textColor","size","imageStyle","style","borderRadius","component","props","console","parseInt","inner","setInner","PropTypes"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {View} from 'react-native';\nimport {\n  TextAvatar,\n  ImageAvatar,\n  CustomAvatar,\n} from './components/'; ;\nimport {\n  fetchImage,\n  getContainerStyle,\n  generateBackgroundStyle,\n} from './helpers';\n\nconst UserAvatar = (props) => {\n  let {\n    name,\n    src,\n    bgColor,\n    bgColors,\n    textColor,\n    size,\n    imageStyle,\n    style,\n    borderRadius,\n    component,\n  } = props;\n\n  // Validations\n  if (typeof (size) === 'string') {\n    console.warn('size prop should be a number');\n    size = parseInt(size);\n  }\n\n  const [inner, setInner] = useState(\n      <TextAvatar textColor={textColor} size={size} name={name} />,\n  );\n\n  useEffect(() => {\n    if (component) setInner(<CustomAvatar size={size} component={component} />);\n    if (src) {\n      fetchImage(src).then((isImage) => {\n        if (isImage) {\n          setInner(\n              <ImageAvatar src={src} size={size} imageStyle={imageStyle} />,\n          );\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <View style={[\n      generateBackgroundStyle(name, bgColor, bgColors),\n      getContainerStyle(size, src, borderRadius),\n      style]}\n    >\n      {inner}\n    </View>\n  );\n};\n\nUserAvatar.propTypes = {\n  name: PropTypes.string,\n  src: PropTypes.string,\n  bgColor: PropTypes.string,\n  bgColors: PropTypes.array,\n  textColor: PropTypes.string,\n  size: PropTypes.number,\n  imageStyle: PropTypes.object,\n  style: PropTypes.object,\n  borderRadius: PropTypes.number,\n  component: PropTypes.any,\n};\n\nUserAvatar.defaultProps = {\n  size: 32,\n  textColor: '#fff',\n  name: 'John Doe',\n  bgColors: [ // from https://flatuicolors.com/\n    '#2ecc71', // emerald\n    '#3498db', // peter river\n    '#8e44ad', // wisteria\n    '#e67e22', // carrot\n    '#e74c3c', // alizarin\n    '#1abc9c', // turquoise\n    '#2c3e50', // midnight blue\n  ],\n};\n\nexport default UserAvatar;\n"]},"metadata":{},"sourceType":"script"}